/**
 * Hypermedia-jacamo build file
 */

plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
}

version '0.1'
group   'org.hypermedea'

repositories {
    mavenCentral()
    // artifact repository for JaCaMo-related project
    maven { url "https://raw.github.com/jacamo-lang/mvn-repo/master" }
    // artifact repository for Linked-Data-Fu
    maven { url 'https://paul.ti.rw.fau.de/maven/repository/' }
    maven { url 'https://mvnrepository.com/artifact/net.sourceforge.owlapi/jfact'}
    maven { url 'https://mvnrepository.com/artifact/com.github.galigator.openllet/openllet-owlapi'}
    mavenLocal()
}

dependencies {
    testImplementation 'junit:junit:4.13.1'
    implementation group: 'org.jacamo', name: 'jacamo', version: '0.9'
    implementation group: 'edu.kit.aifb.linkeddatafu', name: 'linked-data-fu-standalone', version: '0.9.12'

    implementation group: 'net.sourceforge.owlapi', name: 'org.semanticweb.hermit', version: '1.4.5.519'
    implementation group: 'com.github.galigator.openllet', name: 'openllet-owlapi', version: '2.6.5'
    implementation group: 'net.sourceforge.owlapi', name: 'jfact', version: '5.0.3'


    // TODO include newer version of wot-td-java
    implementation group: 'ch.unisg.ics.interactions', name: 'wot-td-java', version: '0.0.1'
    implementation fileTree(dir: 'lib', include: 'pddl4j-*.jar')
    implementation fileTree(dir: 'lib', include: 'openllet-owlapi-2.6.5.jar')
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

mainClassName = 'jacamo.infra.JaCaMoLauncher'

publishing {
    publications {
        lib(MavenPublication) {
            from components.java
        }
    }

    // TODO add Maven Central repo with auth
    // see https://docs.gradle.org/4.4.1/userguide/publishing_maven.html
}

/**
 * integration tests of artifacts with Jason agents
 */
task testAgt (type: JavaExec, dependsOn: 'classes') {
    description 'runs the JaCaMo application for Test'
    doFirst {
        mkdir 'log'
    }
    main = 'jacamo.infra.JaCaMoLauncher'
    args 'test.jcm'
    workingDir = 'src/test/jacamo/agentUnit/'
    classpath sourceSets.main.runtimeClasspath
}

task testErrAgt (type: JavaExec, dependsOn: 'classes') {
    description 'runs the JaCaMo application for Test'
    doFirst {
        mkdir 'log'
    }
    main = 'jacamo.infra.JaCaMoLauncher'
    args 'test_err.jcm'
    workingDir = 'src/test/jacamo/agentUnit/'
    classpath sourceSets.main.runtimeClasspath
}

// Clean up
clean {
    delete 'bin'
    delete 'build'
    delete 'log'
}